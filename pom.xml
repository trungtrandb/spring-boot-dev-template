<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>3.4.5</version>
  </parent>

  <groupId>site.code4fun</groupId>
  <artifactId>demo</artifactId>
  <version>0.1</version>
  <name>Spring boot Application</name>
  <description>Spring boot Demo</description>

  <properties>
    <mapstruct.version>1.6.3</mapstruct.version>
    <springdoc-openapi-ui.version>1.8.0</springdoc-openapi-ui.version>
    <openapi.version>2.8.6</openapi.version>
    <io.jsonwebtoken.version>0.12.6</io.jsonwebtoken.version>
    <firebase.version>9.4.3</firebase.version>
    <geoip2.version>4.2.1</geoip2.version>
    <mysql-connector.version>9.2.0</mysql-connector.version>
    <aws.version>2.31.8</aws.version>
    <loki-logback.version>1.5.0-rc1</loki-logback.version>
    <apache-poi.version>5.4.1</apache-poi.version>
    <datafaker.version>2.4.1</datafaker.version>
    <yubico-webauthn.version>2.5.3</yubico-webauthn.version>
    <jsoup.version>1.18.1</jsoup.version>
    <selenium.version>4.23.0</selenium.version>
    <zxing.version>3.5.3</zxing.version>
    <twilio.version>10.6.8</twilio.version>
    <commons-compress.version>1.26.1</commons-compress.version>
    <flying-saucer-pdf.version>9.7.1</flying-saucer-pdf.version>
    <jacoco-maven-plugin.version>0.8.12</jacoco-maven-plugin.version>
    <sonar-maven-plugin.version>4.0.0.4121</sonar-maven-plugin.version>
    <org.json.version>20250107</org.json.version>
    <google-drive-api.version>v3-rev197-1.25.0</google-drive-api.version>
    <protobuf-java.version>4.29.0-RC3</protobuf-java.version>
    <jasypt.version>3.0.5</jasypt.version>
    <minio.version>8.5.12</minio.version>
    <langchain4j.version>1.0.0-beta1</langchain4j.version>
    <paho-mqtt.version>1.2.5</paho-mqtt.version>
    <maven.compiler.source>17</maven.compiler.source>
    <maven.compiler.target>17</maven.compiler.target>

    <!-- sonar config -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <sonar.host.url>http://localhost:9000</sonar.host.url>
    <sonar.token>your_sonar_token</sonar.token>
    <sonar.exclusions>target/**/*</sonar.exclusions>
    <sonar.exclusions>Dockerfile</sonar.exclusions>
    <sonar.exclusions>pom.xml</sonar.exclusions>
    <sonar.projectKey>spring-boot</sonar.projectKey>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-security</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.security</groupId>
      <artifactId>spring-security-test</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-redis</artifactId>
    </dependency>

    <!-- https://mvnrepository.com/artifact/org.springframework.graphql/spring-graphql -->
    <dependency>
      <groupId>org.springframework.graphql</groupId>
      <artifactId>spring-graphql</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-cache</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-thymeleaf</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-quartz</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
      <exclusions>
        <exclusion>  <!--	using gson		-->
          <groupId>com.vaadin.external.google</groupId>
          <artifactId>android-json</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <!-- Send mail -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-mail</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-oauth2-client</artifactId>
    </dependency>

    <!--	Message Queue	-->
    <!--		<dependency>-->
    <!--			<groupId>org.springframework.kafka</groupId>-->
    <!--			<artifactId>spring-kafka</artifactId>-->
    <!--		</dependency>-->

    <!--		<dependency>-->
    <!--			<groupId>org.springframework.data</groupId>-->
    <!--			<artifactId>spring-data-elasticsearch</artifactId>-->
    <!--		</dependency>-->

    <!-- Health check	-->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>

    <dependency>
      <groupId>io.micrometer</groupId>
      <artifactId>micrometer-registry-prometheus</artifactId>
    </dependency>

    <!--	Generate fake data	-->
    <!--		<dependency>-->
    <!--			<groupId>net.datafaker</groupId>-->
    <!--			<artifactId>datafaker</artifactId>-->
    <!--			<version>${datafaker.version}</version>-->
    <!--		</dependency>-->

    <!--	Login with passKey	-->
    <dependency>
      <groupId>com.yubico</groupId>
      <artifactId>webauthn-server-core</artifactId>
      <version>${yubico-webauthn.version}</version>
    </dependency>
    <!--	Export Excel	-->
    <dependency>
      <groupId>org.apache.poi</groupId>
      <artifactId>poi</artifactId>
      <version>${apache-poi.version}</version>
    </dependency>

    <dependency>
      <groupId>org.apache.poi</groupId>
      <artifactId>poi-ooxml</artifactId>
      <version>${apache-poi.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-compress</artifactId>
      <version>${commons-compress.version}</version>
    </dependency>

    <!-- MySql -->
    <dependency>
      <groupId>com.mysql</groupId>
      <artifactId>mysql-connector-j</artifactId>
    </dependency>

    <!-- Postgresql database -->
    <!--		<dependency>-->
    <!--			<groupId>org.postgresql</groupId>-->
    <!--			<artifactId>postgresql</artifactId>-->
    <!--		</dependency>-->

    <!-- Gen JWT -->
    <dependency>
      <groupId>io.jsonwebtoken</groupId>
      <artifactId>jjwt-api</artifactId>
      <version>${io.jsonwebtoken.version}</version>
    </dependency>
    <dependency>
      <groupId>io.jsonwebtoken</groupId>
      <artifactId>jjwt-impl</artifactId>
      <version>${io.jsonwebtoken.version}</version>
    </dependency>
    <dependency>
      <groupId>io.jsonwebtoken</groupId>
      <artifactId>jjwt-jackson</artifactId>
      <version>${io.jsonwebtoken.version}</version>
    </dependency>

    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
    </dependency>

    <dependency>
      <groupId>dev.langchain4j</groupId>
      <artifactId>langchain4j-google-ai-gemini</artifactId>
      <version>${langchain4j.version}</version>
    </dependency>

    <dependency>
      <groupId>dev.langchain4j</groupId>
      <artifactId>langchain4j-open-ai</artifactId>
      <version>${langchain4j.version}</version>
    </dependency>

    <dependency>
      <groupId>dev.langchain4j</groupId>
      <artifactId>langchain4j-anthropic</artifactId>
      <version>${langchain4j.version}</version>
    </dependency>

    <dependency>
      <groupId>dev.langchain4j</groupId>
      <artifactId>langchain4j-web-search-engine-tavily</artifactId>
      <version>${langchain4j.version}</version>
    </dependency>

    <dependency>
      <groupId>dev.langchain4j</groupId>
      <artifactId>langchain4j-easy-rag</artifactId>
      <version>${langchain4j.version}</version>
    </dependency>

    <dependency>
      <groupId>dev.langchain4j</groupId>
      <artifactId>langchain4j-web-search-engine-google-custom</artifactId>
      <version>${langchain4j.version}</version>
    </dependency>

    <dependency>
      <groupId>dev.langchain4j</groupId>
      <artifactId>langchain4j</artifactId>
      <version>${langchain4j.version}</version>
    </dependency>

    <dependency>
      <groupId>org.eclipse.paho</groupId>
      <artifactId>org.eclipse.paho.client.mqttv3</artifactId>
      <version>${paho-mqtt.version}</version>
    </dependency>

    <!-- Auto gen REST Doc -->
    <dependency>
      <groupId>org.springdoc</groupId>
      <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
      <version>${openapi.version}</version>
    </dependency>

    <!--	WebSocket as signal server for WebRTC	-->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-websocket</artifactId>
    </dependency>

    <dependency>
      <groupId>org.json</groupId>
      <artifactId>json</artifactId>
      <version>${org.json.version}</version>
    </dependency>

    <!--	Mapper	 -->
    <dependency>
      <groupId>org.mapstruct</groupId>
      <artifactId>mapstruct</artifactId>
      <version>${mapstruct.version}</version>
    </dependency>

    <!--	Migrate	-->
    <dependency>
      <groupId>org.flywaydb</groupId>
      <artifactId>flyway-core</artifactId>
    </dependency>

    <dependency>
      <groupId>org.flywaydb</groupId>
      <artifactId>flyway-mysql</artifactId>
    </dependency>

    <!-- Cloud Storage-->
    <dependency>
      <groupId>com.google.cloud</groupId>
      <artifactId>google-cloud-storage</artifactId>
    </dependency>

    <dependency>
      <groupId>io.minio</groupId>
      <artifactId>minio</artifactId>
      <version>${minio.version}</version>
    </dependency>

    <dependency>
      <groupId>com.google.protobuf</groupId>
      <artifactId>protobuf-java</artifactId>
    </dependency>


    <!-- Google Service-->
    <dependency>
      <groupId>com.google.apis</groupId>
      <artifactId>google-api-services-drive</artifactId>
      <version>${google-drive-api.version}</version>
    </dependency>
    <dependency>
      <groupId>com.google.oauth-client</groupId>
      <artifactId>google-oauth-client-jetty</artifactId>
    </dependency>
    <dependency>
      <groupId>com.google.cloud</groupId>
      <artifactId>google-cloud-translate</artifactId>
    </dependency>
<!--    <dependency>-->
<!--      <groupId>com.google.cloud</groupId>-->
<!--      <artifactId>google-cloud-bigquery</artifactId>-->
<!--    </dependency>-->
    <dependency>
      <groupId>com.google.cloud</groupId>
      <artifactId>google-cloud-vision</artifactId>
    </dependency>
    <dependency>
      <groupId>com.google.firebase</groupId>
      <artifactId>firebase-admin</artifactId>
      <version>${firebase.version}</version>
    </dependency>

    <!-- https://mvnrepository.com/artifact/com.maxmind.geoip2/geoip2 -->
    <dependency>
      <groupId>com.maxmind.geoip2</groupId>
      <artifactId>geoip2</artifactId>
      <version>${geoip2.version}</version>
    </dependency>


    <dependency>
      <groupId>software.amazon.awssdk</groupId>
      <artifactId>s3</artifactId>
<!--      <version>${aws-s3.version}</version>-->
    </dependency>
    <!-- https://mvnrepository.com/artifact/software.amazon.awssdk/rekognition -->
    <dependency>
      <groupId>software.amazon.awssdk</groupId>
      <artifactId>rekognition</artifactId>
<!--      <version>${aws-s3.version}</version>-->
    </dependency>
    <!-- Logging monitor		-->
    <dependency>
      <groupId>software.amazon.awssdk</groupId>
      <artifactId>cloudwatchlogs</artifactId>
<!--      <version>${aws-cloudwatch.version}</version>-->
    </dependency>
    <dependency>
      <groupId>com.github.loki4j</groupId>
      <artifactId>loki-logback-appender</artifactId>
      <version>${loki-logback.version}</version>
    </dependency>

    <!-- Send and receive SMS, MMS, WhatsApp messages  -->
    <dependency>
      <groupId>com.twilio.sdk</groupId>
      <artifactId>twilio</artifactId>
      <version>${twilio.version}</version>
    </dependency>

    <!--	Generate PDF	-->
    <dependency>
      <groupId>org.xhtmlrenderer</groupId>
      <artifactId>flying-saucer-pdf</artifactId>
      <version>${flying-saucer-pdf.version}</version>
    </dependency>

    <!--	jsoup only parser html document, can't interact like click or execute js  -->
    <!--		<dependency>-->
    <!--			<groupId>org.jsoup</groupId>-->
    <!--			<artifactId>jsoup</artifactId>-->
    <!--			<version>${jsoup.version}</version>-->
    <!--		</dependency>-->

    <!--	selenium can parser html document interact like click or execute js but take more time to load and need download webdriver depend on platform -->
    <dependency>
      <groupId>org.seleniumhq.selenium</groupId>
      <artifactId>selenium-java</artifactId>
    </dependency>

    <!-- Generate QR Code -->
    <dependency>
      <groupId>com.google.zxing</groupId>
      <artifactId>javase</artifactId>
      <version>${zxing.version}</version>
    </dependency>

    <!-- Password Encrypt -->
    <dependency>
      <groupId>com.github.ulisesbocchio</groupId>
      <artifactId>jasypt-spring-boot-starter</artifactId>
      <version>${jasypt.version}</version>
    </dependency>

  </dependencies>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>com.google.cloud</groupId>
        <artifactId>libraries-bom</artifactId>
        <version>26.59.0</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>software.amazon.awssdk</groupId>
        <artifactId>bom</artifactId>
        <version>${aws.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <build>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <annotationProcessorPaths>
            <path>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok</artifactId>
              <version>${lombok.version}</version>
            </path>
            <path>
              <groupId>org.mapstruct</groupId>
              <artifactId>mapstruct-processor</artifactId>
              <version>${mapstruct.version}</version>
            </path>
          </annotationProcessorPaths>
        </configuration>
      </plugin>
      <plugin>
        <groupId>com.github.ulisesbocchio</groupId>
        <artifactId>jasypt-maven-plugin</artifactId>
        <version>3.0.5</version>
      </plugin>
      <!--	Send code scan report to sonarqube	-->
      <plugin>
        <groupId>org.sonarsource.scanner.maven</groupId>
        <artifactId>sonar-maven-plugin</artifactId>
        <version>${sonar-maven-plugin.version}</version>
      </plugin>
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>${jacoco-maven-plugin.version}</version>
        <executions>
          <execution>
            <id>jacoco-initialize</id>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <execution>
            <id>jacoco-site</id>
            <phase>package</phase>
            <goals>
              <goal>report</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
